{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"D:\\\\WEB\\\\Grandz\\\\apps\\\\sample-embedded-app\\\\src\\\\components\\\\Scraper.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from 'react';\nimport cheerio from \"cheerio\";\nimport { useAppContext } from '../context/state';\n\nvar Scraper = function Scraper() {\n  _s();\n\n  var _useAppContext = useAppContext(),\n      prices = _useAppContext.prices,\n      updateAllPrices = _useAppContext.updateAllPrices;\n\n  var scrapeAllPrices = function scrapeAllPrices() {\n    var promicesArr = [];\n    var newPricesArr = [];\n    prices.map(function (priceObj) {\n      var scapePrice = fetch(priceObj.url).then(function (responce) {\n        return responce.text();\n      }).then(function (html) {\n        var $ = cheerio.load(html);\n        var price = $(priceObj.path).prepend().text();\n        newPricesArr.push(_objectSpread(_objectSpread({}, priceObj), {}, {\n          value: price || 'Can\\'t get Price'\n        }));\n        var postBody = {\n          \"metafield\": {\n            \"namespace\": \"competitors\",\n            \"key\": priceObj.title,\n            \"value\": price,\n            \"value_type\": \"string\"\n          }\n        };\n        return fetch('/admin/api/2021-01/metafields.json', {\n          mathod: 'POST',\n          body: JSON.stringify(postBody)\n        });\n      }).then(function (responce) {\n        console.log(responce);\n      });\n      promicesArr.push(scapePrice);\n    });\n    Promise.allSettled(promicesArr).then(function () {\n      updateAllPrices(newPricesArr);\n    });\n  };\n\n  setInterval(function () {\n    var currentTime = new Date();\n    currentTime = currentTime.getHours();\n\n    if (currentTime == 0) {\n      scrapeAllPrices();\n    }\n  }, 360000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-btn-wrapper container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: function onClick() {\n        return scrapeAllPrices();\n      },\n      children: \"Update Prices\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Scraper, \"vcyXojGabGuOKrwCF91GcBf5sCU=\", false, function () {\n  return [useAppContext];\n});\n\n_c = Scraper;\nexport default Scraper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scraper\");","map":{"version":3,"sources":["D:/WEB/Grandz/apps/sample-embedded-app/src/components/Scraper.js"],"names":["React","useEffect","cheerio","useAppContext","Scraper","prices","updateAllPrices","scrapeAllPrices","promicesArr","newPricesArr","map","priceObj","scapePrice","fetch","url","then","responce","text","html","$","load","price","path","prepend","push","value","postBody","title","mathod","body","JSON","stringify","console","log","Promise","allSettled","setInterval","currentTime","Date","getHours"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAAQC,aAAR,QAA4B,kBAA5B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAAA,uBACcD,aAAa,EAD3B;AAAA,MACbE,MADa,kBACbA,MADa;AAAA,MACLC,eADK,kBACLA,eADK;;AAGpB,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,YAAY,GAAG,EAArB;AAEAJ,IAAAA,MAAM,CAACK,GAAP,CAAY,UAAAC,QAAQ,EAAI;AAEtB,UAAMC,UAAU,GAAGC,KAAK,CAACF,QAAQ,CAACG,GAAV,CAAL,CAClBC,IADkB,CACb,UAACC,QAAD,EAAc;AAClB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHkB,EAIlBF,IAJkB,CAIb,UAACG,IAAD,EAAU;AACd,YAAIC,CAAC,GAAGjB,OAAO,CAACkB,IAAR,CAAaF,IAAb,CAAR;AAEA,YAAIG,KAAK,GAAGF,CAAC,CAACR,QAAQ,CAACW,IAAV,CAAD,CAAiBC,OAAjB,GAA2BN,IAA3B,EAAZ;AACAR,QAAAA,YAAY,CAACe,IAAb,iCACKb,QADL;AAEEc,UAAAA,KAAK,EAAEJ,KAAK,IAAI;AAFlB;AAKA,YAAMK,QAAQ,GAAG;AACf,uBAAa;AACX,yBAAa,aADF;AAEX,mBAAOf,QAAQ,CAACgB,KAFL;AAGX,qBAASN,KAHE;AAIX,0BAAc;AAJH;AADE,SAAjB;AAQA,eAAOR,KAAK,CAAC,oCAAD,EAAuC;AACjDe,UAAAA,MAAM,EAAE,MADyC;AAEjDC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,QAAf;AAF2C,SAAvC,CAAZ;AAID,OAzBkB,EA0BlBX,IA1BkB,CA0Bb,UAACC,QAAD,EAAc;AAClBgB,QAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ;AACD,OA5BkB,CAAnB;AA8BAR,MAAAA,WAAW,CAACgB,IAAZ,CAAiBZ,UAAjB;AACD,KAjCD;AAmCAsB,IAAAA,OAAO,CAACC,UAAR,CAAmB3B,WAAnB,EAAgCO,IAAhC,CAAqC,YAAM;AACzCT,MAAAA,eAAe,CAACG,YAAD,CAAf;AACD,KAFD;AAGD,GA1CD;;AA4CA2B,EAAAA,WAAW,CAAC,YAAI;AACd,QAAIC,WAAW,GAAG,IAAIC,IAAJ,EAAlB;AACAD,IAAAA,WAAW,GAAGA,WAAW,CAACE,QAAZ,EAAd;;AACA,QAAGF,WAAW,IAAI,CAAlB,EAAoB;AAClB9B,MAAAA,eAAe;AAChB;AACF,GANU,EAMR,MANQ,CAAX;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,OAAO,EAAE;AAAA,eAAMA,eAAe,EAArB;AAAA,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CA5DD;;GAAMH,O;UAC8BD,a;;;KAD9BC,O;AA8DN,eAAeA,OAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport cheerio from \"cheerio\";\r\nimport {useAppContext} from '../context/state';\r\n\r\nconst Scraper = () => {\r\n  const {prices, updateAllPrices} = useAppContext();\r\n  \r\n  const scrapeAllPrices = () => {\r\n    const promicesArr = [];\r\n    const newPricesArr = [];\r\n\r\n    prices.map( priceObj => {\r\n      \r\n      const scapePrice = fetch(priceObj.url)\r\n      .then((responce) => {\r\n        return responce.text()\r\n      })\r\n      .then((html) => {\r\n        let $ = cheerio.load(html);\r\n\r\n        let price = $(priceObj.path).prepend().text();\r\n        newPricesArr.push({\r\n          ...priceObj,\r\n          value: price || 'Can\\'t get Price'\r\n        })\r\n\r\n        const postBody = {\r\n          \"metafield\": {\r\n            \"namespace\": \"competitors\",\r\n            \"key\": priceObj.title,\r\n            \"value\": price,\r\n            \"value_type\": \"string\"\r\n          }\r\n        }\r\n        return fetch('/admin/api/2021-01/metafields.json', {\r\n          mathod: 'POST',\r\n          body: JSON.stringify(postBody)\r\n        });\r\n      })\r\n      .then((responce) => {\r\n        console.log(responce) \r\n      })\r\n      \r\n      promicesArr.push(scapePrice);\r\n    });\r\n\r\n    Promise.allSettled(promicesArr).then(() => {\r\n      updateAllPrices(newPricesArr)\r\n    })\r\n  }\r\n\r\n  setInterval(()=>{\r\n    let currentTime = new Date;\r\n    currentTime = currentTime.getHours();\r\n    if(currentTime == 0){  \r\n      scrapeAllPrices()\r\n    }\r\n  }, 360000)\r\n\r\n  return (\r\n    <div className=\"main-btn-wrapper container\">\r\n      <button className=\"btn btn-primary\" onClick={() => scrapeAllPrices()}>Update Prices</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scraper;"]},"metadata":{},"sourceType":"module"}