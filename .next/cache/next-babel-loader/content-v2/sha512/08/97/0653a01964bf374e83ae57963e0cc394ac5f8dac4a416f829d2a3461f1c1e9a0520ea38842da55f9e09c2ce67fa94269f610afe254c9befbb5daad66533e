{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\WEB\\\\Grandz\\\\apps\\\\sample-embedded-app\\\\src\\\\components\\\\Scraper.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport cheerio from \"cheerio\";\nimport { useAppContext } from '../context/state';\n\nvar Scraper = function Scraper() {\n  _s();\n\n  var _useAppContext = useAppContext(),\n      prices = _useAppContext.prices,\n      updateAllPrices = _useAppContext.updateAllPrices;\n\n  var scrapeAllPrices = function scrapeAllPrices() {\n    Promise.allSettled(promicesArr).then(function () {\n      newPricesArr.forEach(function (priceObj) {\n        var postBody = {\n          \"metafield\": {\n            \"namespace\": \"competitors\",\n            \"key\": priceObj.title,\n            \"value\": priceObj.value,\n            \"value_type\": \"string\"\n          }\n        };\n        fetch('/metafields', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(postBody)\n        }).then(function (responce) {\n          return responce.json();\n        }).then(function (body) {\n          console.log(body);\n        });\n      });\n      updateAllPrices(newPricesArr);\n    });\n  };\n\n  setInterval(function () {\n    var currentTime = new Date();\n    currentTime = currentTime.getHours();\n\n    if (currentTime == 0) {\n      scrapeAllPrices();\n    }\n  }, 3600000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-btn-wrapper container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: function onClick() {\n        return scrapeAllPrices();\n      },\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Scraper, \"vcyXojGabGuOKrwCF91GcBf5sCU=\", false, function () {\n  return [useAppContext];\n});\n\n_c = Scraper;\nexport default Scraper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scraper\");","map":{"version":3,"sources":["D:/WEB/Grandz/apps/sample-embedded-app/src/components/Scraper.js"],"names":["React","useEffect","cheerio","useAppContext","Scraper","prices","updateAllPrices","scrapeAllPrices","Promise","allSettled","promicesArr","then","newPricesArr","forEach","priceObj","postBody","title","value","fetch","method","headers","body","JSON","stringify","responce","json","console","log","setInterval","currentTime","Date","getHours"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAAQC,aAAR,QAA4B,kBAA5B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAAA,uBACcD,aAAa,EAD3B;AAAA,MACbE,MADa,kBACbA,MADa;AAAA,MACLC,eADK,kBACLA,eADK;;AAGpB,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAG5BC,IAAAA,OAAO,CAACC,UAAR,CAAmBC,WAAnB,EAAgCC,IAAhC,CAAqC,YAAM;AACzCC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAAAC,QAAQ,EAAI;AAC/B,YAAMC,QAAQ,GAAG;AACf,uBAAa;AACX,yBAAa,aADF;AAEX,mBAAOD,QAAQ,CAACE,KAFL;AAGX,qBAASF,QAAQ,CAACG,KAHP;AAIX,0BAAc;AAJH;AADE,SAAjB;AAQAC,QAAAA,KAAK,CAAC,aAAD,EAAgB;AACnBC,UAAAA,MAAM,EAAE,MADW;AAEnBC,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WAFU;AAKnBC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,QAAf;AALa,SAAhB,CAAL,CAOCJ,IAPD,CAOM,UAACa,QAAD,EAAc;AAClB,iBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,SATD,EAUCd,IAVD,CAUM,UAACU,IAAD,EAAU;AACdK,UAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACD,SAZD;AAaD,OAtBD;AAyBAf,MAAAA,eAAe,CAACM,YAAD,CAAf;AACD,KA3BD;AA4BD,GA/BD;;AAiCAgB,EAAAA,WAAW,CAAC,YAAI;AACd,QAAIC,WAAW,GAAG,IAAIC,IAAJ,EAAlB;AACAD,IAAAA,WAAW,GAAGA,WAAW,CAACE,QAAZ,EAAd;;AACA,QAAGF,WAAW,IAAI,CAAlB,EAAoB;AAClBtB,MAAAA,eAAe;AAChB;AACF,GANU,EAMR,OANQ,CAAX;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,OAAO,EAAE;AAAA,eAAMA,eAAe,EAArB;AAAA,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAjDD;;GAAMH,O;UAC8BD,a;;;KAD9BC,O;AAmDN,eAAeA,OAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport cheerio from \"cheerio\";\r\nimport {useAppContext} from '../context/state';\r\n\r\nconst Scraper = () => {\r\n  const {prices, updateAllPrices} = useAppContext();\r\n\r\n  const scrapeAllPrices = () => {\r\n    \r\n\r\n    Promise.allSettled(promicesArr).then(() => {\r\n      newPricesArr.forEach(priceObj => {\r\n        const postBody = {\r\n          \"metafield\": {\r\n            \"namespace\": \"competitors\",\r\n            \"key\": priceObj.title,\r\n            \"value\": priceObj.value,\r\n            \"value_type\": \"string\"\r\n          }\r\n        }\r\n        fetch('/metafields', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(postBody)\r\n        })\r\n        .then((responce) => {\r\n          return responce.json()\r\n        })\r\n        .then((body) => {\r\n          console.log(body);\r\n        })\r\n      })\r\n\r\n      \r\n      updateAllPrices(newPricesArr)\r\n    })\r\n  }\r\n\r\n  setInterval(()=>{\r\n    let currentTime = new Date;\r\n    currentTime = currentTime.getHours();\r\n    if(currentTime == 0){  \r\n      scrapeAllPrices()\r\n    }\r\n  }, 3600000)\r\n\r\n  return (\r\n    <div className=\"main-btn-wrapper container\">\r\n      <button className=\"btn btn-primary\" onClick={() => scrapeAllPrices()}>Save</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scraper;"]},"metadata":{},"sourceType":"module"}