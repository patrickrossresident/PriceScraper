{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\WEB\\\\Grandz\\\\apps\\\\sample-embedded-app\\\\src\\\\context\\\\state.js\";\nimport { createContext, useContext, useState } from 'react';\nconst AppContext = /*#__PURE__*/createContext();\nexport function AppWrapper({\n  children\n}) {\n  const {\n    0: prices,\n    1: setPrices\n  } = useState([]);\n\n  const updatePrice = (id, title, url, path) => {\n    const newPrice = {\n      id,\n      url,\n      path,\n      title\n    };\n    const idx = prices.findIndex(price => price.id = id);\n    const newPrices = prices.filter(price => price.id != id);\n  };\n\n  const addPrice = (title, url, path) => {\n    const id = Date.now();\n    const newPrice = {\n      id,\n      url,\n      path,\n      title\n    };\n    setPrices([...prices, newPrice]);\n  };\n\n  const removePrice = id => {\n    const newPrices = prices.filter(price => price.id != id);\n    setPrices(newPrices);\n  };\n\n  const getAllPrices = id => {\n    return fetch('/metafields/get').then(response => response.json()).then(data => {\n      setPrices(data);\n    });\n  };\n\n  const updateAllPrices = () => {\n    return fetch('/metafields/', {\n      method: 'POST',\n      body: JSON.stringify(prices)\n    }).then(response => response.json()).then(data => {\n      setPrices(data);\n    });\n  };\n\n  let sharedState = {\n    prices,\n    updatePrice,\n    addPrice,\n    removePrice,\n    updateAllPrices,\n    getAllPrices\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: sharedState,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\nexport function useAppContext() {\n  return useContext(AppContext);\n}","map":{"version":3,"sources":["D:/WEB/Grandz/apps/sample-embedded-app/src/context/state.js"],"names":["createContext","useContext","useState","AppContext","AppWrapper","children","prices","setPrices","updatePrice","id","title","url","path","newPrice","idx","findIndex","price","newPrices","filter","addPrice","Date","now","removePrice","getAllPrices","fetch","then","response","json","data","updateAllPrices","method","body","JSON","stringify","sharedState","useAppContext"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AAGA,MAAMC,UAAU,gBAAGH,aAAa,EAAhC;AAEA,OAAO,SAASI,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAkC;AACvC,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBL,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMM,WAAW,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC5C,UAAMC,QAAQ,GAAG;AACfJ,MAAAA,EADe;AAEfE,MAAAA,GAFe;AAGfC,MAAAA,IAHe;AAIfF,MAAAA;AAJe,KAAjB;AAMA,UAAMI,GAAG,GAAGR,MAAM,CAACS,SAAP,CAAiBC,KAAK,IAAIA,KAAK,CAACP,EAAN,GAAWA,EAArC,CAAZ;AACA,UAAMQ,SAAS,GAAGX,MAAM,CAACY,MAAP,CAAcF,KAAK,IAAIA,KAAK,CAACP,EAAN,IAAYA,EAAnC,CAAlB;AAED,GAVD;;AAYA,QAAMU,QAAQ,GAAG,CAACT,KAAD,EAAQC,GAAR,EAAaC,IAAb,KAAsB;AACrC,UAAMH,EAAE,GAAGW,IAAI,CAACC,GAAL,EAAX;AACA,UAAMR,QAAQ,GAAG;AACfJ,MAAAA,EADe;AAEfE,MAAAA,GAFe;AAGfC,MAAAA,IAHe;AAIfF,MAAAA;AAJe,KAAjB;AAOAH,IAAAA,SAAS,CAAC,CACR,GAAGD,MADK,EAERO,QAFQ,CAAD,CAAT;AAID,GAbD;;AAeA,QAAMS,WAAW,GAAIb,EAAD,IAAQ;AAC1B,UAAMQ,SAAS,GAAGX,MAAM,CAACY,MAAP,CAAcF,KAAK,IAAIA,KAAK,CAACP,EAAN,IAAYA,EAAnC,CAAlB;AAEAF,IAAAA,SAAS,CAACU,SAAD,CAAT;AACD,GAJD;;AAMA,QAAMM,YAAY,GAAId,EAAD,IAAQ;AAC3B,WAAOe,KAAK,CAAC,iBAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECG,IAAI,IAAI;AACZrB,MAAAA,SAAS,CAACqB,IAAD,CAAT;AACD,KAJI,CAAP;AAKD,GAND;;AAUA,QAAMC,eAAe,GAAG,MAAM;AAC5B,WAAOL,KAAK,CAAC,cAAD,EAAiB;AAC3BM,MAAAA,MAAM,EAAE,MADmB;AAE3BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe3B,MAAf;AAFqB,KAAjB,CAAL,CAIJmB,IAJI,CAICC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJb,EAKJF,IALI,CAKCG,IAAI,IAAI;AACZrB,MAAAA,SAAS,CAACqB,IAAD,CAAT;AAED,KARI,CAAP;AASD,GAVD;;AAYA,MAAIM,WAAW,GAAG;AAAC5B,IAAAA,MAAD;AAASE,IAAAA,WAAT;AAAsBW,IAAAA,QAAtB;AAAgCG,IAAAA,WAAhC;AAA6CO,IAAAA,eAA7C;AAA8DN,IAAAA;AAA9D,GAAlB;AAEA,sBACE,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEW,WAA5B;AAAA,cACG7B;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;AAED,OAAO,SAAS8B,aAAT,GAAyB;AAC9B,SAAOlC,UAAU,CAACE,UAAD,CAAjB;AACD","sourcesContent":["import { createContext, useContext, useState } from 'react';\r\n\r\n\r\nconst AppContext = createContext();\r\n\r\nexport function AppWrapper({ children }) {\r\n  const [prices, setPrices] = useState([]);\r\n\r\n  const updatePrice = (id, title, url, path) => {\r\n    const newPrice = {\r\n      id,\r\n      url,\r\n      path,\r\n      title\r\n    }\r\n    const idx = prices.findIndex(price => price.id = id)\r\n    const newPrices = prices.filter(price => price.id != id)\r\n    \r\n  }\r\n\r\n  const addPrice = (title, url, path) => {\r\n    const id = Date.now();\r\n    const newPrice = {\r\n      id,\r\n      url,\r\n      path,\r\n      title\r\n    }\r\n    \r\n    setPrices([\r\n      ...prices,\r\n      newPrice\r\n    ])\r\n  }\r\n\r\n  const removePrice = (id) => {\r\n    const newPrices = prices.filter(price => price.id != id)\r\n    \r\n    setPrices(newPrices)\r\n  }\r\n\r\n  const getAllPrices = (id) => {\r\n    return fetch('/metafields/get')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setPrices(data)\r\n      })\r\n  }\r\n\r\n\r\n\r\n  const updateAllPrices = () => {\r\n    return fetch('/metafields/', {\r\n      method: 'POST',\r\n      body: JSON.stringify(prices)\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setPrices(data)\r\n        \r\n      })\r\n  }\r\n\r\n  let sharedState = {prices, updatePrice, addPrice, removePrice, updateAllPrices, getAllPrices};\r\n  \r\n  return (\r\n    <AppContext.Provider value={sharedState}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAppContext() {\r\n  return useContext(AppContext);\r\n}"]},"metadata":{},"sourceType":"module"}